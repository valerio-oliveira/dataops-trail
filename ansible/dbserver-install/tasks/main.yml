- block:
    - name: Install base packages
      apt:
        name: "{{ item }}"
        update_cache: yes
        state: present
      loop:
        - htop
        - tree
        - lsof
        - gnupg2
        - mcedit
        - dstat
        - mtr
        - python3
      tags:
        - dependencies

    - name: Add postgresql signing key
      ansible.builtin.apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        state: present

    - name: Add postgresql repository into sources list
      ansible.builtin.apt_repository:
        repo: deb http://apt.postgresql.org/pub/repos/apt/ buster-pgdg main
        state: present

    - name: Update packages
      apt:
        update_cache: yes
        force_apt_get: yes
        cache_valid_time: 3600

    - name: Install postgresql packages
      apt:
        name: "{{ item }}"
        update_cache: yes
        state: present
      loop:
        - postgresql-13
        - python3-psycopg2

  become: yes
  tags: binaries

- block:
    - name: Configure postgresql.conf - set "listen_addresses"
      lineinfile:
        dest: /etc/postgresql/13/main/postgresql.conf
        regexp: "listen_addresses ="
        line: "listen_addresses = '*'   # what IP address(es) to listen on;"
        state: present

    - name: Configure postgresql.conf - set "max_wal_senders"
      lineinfile:
        dest: /etc/postgresql/13/main/postgresql.conf
        regexp: "max_wal_senders ="
        line: "max_wal_senders = 10   # max number of walsender processes"
        state: present

    - name: Configure postgresql.conf - set "log_destination"
      lineinfile:
        dest: /etc/postgresql/13/main/postgresql.conf
        regexp: "log_destination ="
        line: "log_destination = 'stderr'   # Valid value4s are combinations of"
        state: present

    - name: Configure postgresql.conf - set "logging_collector"
      lineinfile:
        dest: /etc/postgresql/13/main/postgresql.conf
        regexp: "logging_collector ="
        line: "logging_collector = on   # Enable capturing of stderr and csvlog"
        state: present

    - name: Configure postgresql.conf - set "log_line_prefix"
      lineinfile:
        dest: /etc/postgresql/13/main/postgresql.conf
        regexp: "log_line_prefix ="
        line: "log_line_prefix = '%t [%p]: db=%d,user=%u,app=%a,client=%h'"
        state: present

    - name: Configure postgresql.conf - set "log_statement"
      lineinfile:
        dest: /etc/postgresql/13/main/postgresql.conf
        regexp: "log_statement ="
        line: "log_statement = 'all'"
        state: present

      notify: restart postgresql

      # - name: Configure postgresql.conf - set "log_filename"
      #   lineinfile:
      #     dest: /etc/postgresql/13/main/postgresql.conf
      #     regexp: "log_filename ="
      #     line: "log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'    # log file name pattern,"
      #     state: present

      # - name: Configure postgresql.conf - set "log_truncate_on_rotation"
      #   lineinfile:
      #     dest: /etc/postgresql/13/main/postgresql.conf
      #     regexp: "log_truncate_on_rotation ="
      #     line: "log_truncate_on_rotation = on    # If on, an existing log file with the"
      #     state: present

      # - name: Configure postgresql.conf - set "log_rotation_age"
      #   lineinfile:
      #     dest: /etc/postgresql/13/main/postgresql.conf
      #     regexp: "log_rotation_age ="
      #     line: "log_rotation_age = 1d"
      #     state: present

      # - name: Configure postgresql.conf - set "log_rotation_size"
      #   lineinfile:
      #     dest: /etc/postgresql/13/main/postgresql.conf
      #     regexp: "log_rotation_size ="
      #     line: "log_rotation_size = 10MB"
      #     state: present

      # - name: Configure postgresql.conf - set "log_lock_waits"
      #   lineinfile:
      #     dest: /etc/postgresql/13/main/postgresql.conf
      #     regexp: "log_lock_waits ="
      #     line: "log_lock_waits = on"
      #     state: present

    - name: Grant peer authentication to "{{ postgresql_db_user }}"
      postgresql_pg_hba:
        dest: /etc/postgresql/13/main/pg_hba.conf
        contype: host
        databases: "{{ postgresql_db_name }}"
        users: "{{ postgresql_db_user }}"
        source: 0.0.0.0/0
        method: md5
        create: true

    - name: Create replication user
      community.postgresql.postgresql_user:
        name: "repuser"
        role_attr_flags: REPLICATION

    - name: Grant replication access
      postgresql_pg_hba:
        dest: /etc/postgresql/13/main/pg_hba.conf
        contype: host
        databases: "replication"
        users: "repuser"
        source: "{{ replica_db_private_ip.split('.pub')[0] }}/32"
        method: trust
        create: true

  become: yes
  become_user: postgres
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tags: configure postgres
